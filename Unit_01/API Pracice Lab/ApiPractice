 /**
 * This project was created to test our knowledge on Math clases, String Classes and list interfaces. I will say i had some trouble with the
 * getShortestString and getLongestString methods. However when reviewing material and watching the Live lesson it made a lot more sense. 
 *
 * @author Annabel Hartmann
 * @version 1/19/18
 */
 
import java.util.List;
public class ApiPractice {
 /**
  * Finds the hypotenuse of a right triangle given sides a and b.
  * @param a Length of side a.
  * @param b Length of side b.
  * @return Length of hypotenuse.
  */
 public static double hypotenuse(double a, double b) {
	 /* This code uses Math.pow() + Math.sqrt()*/
     double hypotenuse = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
  return hypotenuse;
 }
 
 /**
  * Returns the greater of two values. If the values are exactly the same,
  * it returns one of them.
  * @param a First value.
  * @param b Second value.
  * @return Largest value.
  */
 public static double max(double a, double b) {
	 /* This part of the code uses an if statement and >= */
	 if (a >= b)
		 return a;
	 return b;
 }
 
 /**
  * Returns the smaller of two values. If the values are exactly the same,
  * it returns one of them.
  * @param a First value.
  * @param b Second value.
  * @return Smallest value.
  */
 public static double min(double a, double b) {
	 /* This part of the code uses an if statement and <= */
	 if (a <= b)
		 return a;
	 return b;
 }

 /**
  * Returns the lexicographically greater of two strings. If the values are
  * exactly the same, it returns one of them.
  * @param a First string.
  * @param b Second string.
  * @return Lexicographically greatest string.
  */
 public static String max(String a, String b) {
	 /* This code uses compareTo */
	 if (a.compareTo(b) > 0) {
		 return a; 
	 }
     return b; 
 }
 
 /**
  * Returns the lexicographically lesser of two strings. If the values are
  * exactly the same, it returns one of them.
  * @param a First string.
  * @param b Second string.
  * @return Lexicographically lesser string.
  */
 public static String min(String a, String b) {
	 /* This code uses .compareTo() */
	 if (a.compareTo(b) < 0) {
		 return a; 
	 }
     return b; 
 }

 /**
  * Compares two strings to see if they contain the same text.
  * @param a First string.
  * @param b Second string.
  * @return <code>true</code> if the strings contain the same text,
  * <code>false</code> otherwise.
  */
 public static boolean isSameText(String a, String b) {
	 /* This code uses .equals() . */
	 if( a.equals(b)) {
		 return true;
	 } else {
		 return false;
	 }
 }
 
 /**
  * Returns the longest string (the string with the greatest number of
  * characters) out of three strings. If two or more strings have the same
  * number of characters, it returns the first one.
  * @param a First string.
  * @param b Second string.
  * @param c Third string.
  * @return String with the most characters.
  */
 public static String getLongestString(String a, String b, String c) { 
	 /* This code uses length() */
	 String longest = a;
	 if (a.length() < b.length()) longest = b;
	 if (b.length() < c.length()) longest = c;
  return longest;
 }
 
 /**
  * Returns the shortest string (the string with the lowest number of 
  * characters) from a list of strings. If two or more strings have the
  * same number of characters, it returns the first one.
  * 
  * If the incoming list is <code>null</code> or contains zero strings, 
  * this method returns <code>null</code>.
  * 
  * @param list List of incoming strings.
  * @return String with the fewest characters.
  */
 public static String getShortestString(List<String> list) { 
	 /* This code uses size() and get() */
	 if (list==null || list.size()==0)return null;
	 String shortest = list.get(0);
	 for (int i =1;i<list.size(); i++) {
		 String s = list.get(i);
		 if (s.length() < shortest.length()) shortest = s;
	 }
  return shortest;
 }
 
 /**
  * Returns a substring of the incoming string that contains all of the 
  * characters leading up to, but not including, the comma found
  * in the string.
  * @param s A string with a comma somewhere inside of it.
  * @return The substring leading up to the comma.
  */
 public static String getStringBeforeComma(String s) {
  /* This code uses substring */
	 String getStringBeforeComma = s.substring(0, s.indexOf(","));
  return getStringBeforeComma;
 }
 
 /**
  * Returns a substring of the incoming string that contains all of the 
  * characters after the comma found inside the string.
  * @param s A string with a comma somewhere inside of it.
  * @return The substring after the comma.
  */
 public static String getStringAfterComma(String s) {
  /* This code uses substring */
	 String getStringAfterComma = s.substring(s.indexOf(",")+1);   
  return getStringAfterComma;
 }
}
