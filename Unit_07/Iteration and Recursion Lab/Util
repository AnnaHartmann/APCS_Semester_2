/**
 * This code uses the recursive and iterative methods to find 
 * factorial numbers, digit sums, Fibonacci sequences, array sums and 
 * the # of evens in an array. It also correctly outputs each of the 
 * problems that are within the UtilRunner.
 * 
 * @author Annabel Hartmann
 * @version 3/20/18
 */

/**
 * Provides iterative and recursive methods for a variety of uses.
 */
public class Util {
    /**
     * Calculates the factorial of a number iteratively.
     * @param n Number to be processed.
     * @return Factorial of number specified.
     */
    public static long iterativeFactorial(int n) {
        /* Correctly, iteratively finds the factorial restult for numbers. */
        int result = 1, i = 1;
        while (i <= n){
            result=result*i;
            i++;
        } 
        
        while (0 > n) {
             throw new IllegalArgumentException( "Factorial input value must be a non-negative value." );
        }
        
        return result;
    }
    
    /**
     * Calculates the factorial of a number recursively.
     * @param n Number to be processed.
     * @return Factorial of number specified.
     */
    public static long recursiveFactorial(int n) {
        /* Correctly, recursively finds the factorial restult for numbers.. */
        if(0 > n) {
             throw new IllegalArgumentException( "Factorial input value must be a non-negative value." );
        }
        
        if(n <= 1){
            return 1;
        } else {
            return n*recursiveFactorial(n-1);
        }
    }
    
    /**
     * Calculates the sum of the digits in a number iteratively.
     * @param n Number to be processed.
     * @return Sum of the number's digits.
     */
    public static int iterativeDigitSum(long n) {
        /* Correctly, iteratively finds the digit sum. */
        int sum = 0;
        
        while (n < 0) {
             throw new IllegalArgumentException( "Digit sum input must be a non-negative value." );
        }
        
        while(n != 0){
            sum += (n % 10);
            n = n / 10;
        }
        
        return sum;
    }    
    
    
    /**
     * Calculates the sum of the digits in a number recursively.
     * @param n Number to be processed.
     * @return Sum of the number's digits.
     */
    public static int recursiveDigitSum(long n) { //FIX THIS ONE
        /* Correctly, recursively finds the digit sum. */
        int sum = 0;
        
        if(0 > n) {
             throw new IllegalArgumentException( "Digit sum input must be a non-negative value." );
        }
        
        if(n != 0){
            n = (n % 10 + recursiveDigitSum(n / 10));
            sum = (int) n;
        } 
        
        
        return sum;
    }
    
    /**
     * Calculates the nth value of the modern Fibonacci sequence iteratively.
     * @param n Index of the Fibonacci sequence to be calculated.
     * @return The value at index n of the Fibonacci sequence.
     */
    public static int iterativeFibonacci(int n) {
        /* Corectly, iteratively finds the fibonacci sequence at the requested index "n" */      
        int a = 1;
        int b = 1;
        
        while (n <= 0) {
            throw new IllegalArgumentException("Fibonacci input value must be 1 or greater.");
        }
        
        while (n == 1) {
            return 0; 
        }
        
        for(int i = 2; i < n; i++) {
            int c = a + b;
            a = b;
            b = c;
        }
        return a;
        
    }
    
    /**
     * Calculates the nth value of the modern Fibonacci sequence recursively.
     * @param n Index of the Fibonacci sequence to be calculated.
     * @return The value at index n of the Fibonacci sequence.
     */
    public static long recursiveFibonacci(int n) {
        /* Corectly, recursively finds the fibonacci sequence at the requested index "n" */
        long sum = 0;
        
        if (n <= 0) {
            throw new IllegalArgumentException( "Fibonacci input value must be 1 or greater.");
        } 
        
        if (n == 1) {
            return 0;
        } 
        
        if (n == 2) {
            return 1;
        }
        
        if(n > 2){
            sum = (int) (recursiveFibonacci(n-1) + recursiveFibonacci(n-2));
        } 
        
        return sum;
    }
    
    /**
     * Iteratively generates a string made of n copies of a supplied input 
     * string separated by a comma and a space. 
     * @param inputString String to be repeated.
     * @param count Number of times to repeat the input string.
     * @return New constructed string.
     */
    public static String iterativeStringGen(String inputString, int count) {
        /* Corectly, iteratively prints a string a certain amount of time. */
        String outputString = "";
        String result = "";
        
        if (0 > count) {
            throw new IllegalArgumentException( "String count must be 0 or greater.");
        } 
        
        while(count == 0) {
            return "";
        }
        
        while (count == 1) {
            return inputString;
        }
        
        for (int i = 0; i < count; i++) {
            outputString += inputString + ", ";
            result = outputString.substring(0, outputString.length()-2);
        }
        
        return result;
    }

    /**
     * Recursively generates a string made of n copies of a supplied input 
     * string separated by a comma and a space. 
     * @param inputString String to be repeated.
     * @param count Number of times to repeat the input string.
     * @return New constructed string.
     */
    public static String recursiveStringGen(String inputString, int count) {
        /* Corectly, recursively prints a string a certain amount of time. */
        if (0 > count) {
            throw new IllegalArgumentException( "String count must be 0 or greater.");
        }
        
        if(count == 0) {
            return "";
        }
        
        if (count == 1) {
            return inputString;
        } 
        
        if (count > 1) {
            String output = inputString;
            output += ", " + recursiveStringGen(inputString, count-1);
            return output;
        } else {
            return "error";
        }
    }
    
    
    /**
     * Calculates the sum of all numbers in an array iteratively.
     * @param array Array to be processed.
     * @return Sum of elements in the array.
     */
    public static long iterativeArraySum(int[] array) {
        /* Corectly, iteratively finds the suym of an array. */
        int sum = 0;

        for (int i=0; i != array.length; i++) {
           sum = sum + array[i];
        }
        
        return sum; 
    }
    
    /**
     * Calculates the sum of all numbers in an array recursively.
     * @param array Array to be processed.
     * @return Sum of elements in the array.
     */
    public static long recursiveArraySum(int[] array) {
        return recursiveArraySumHelper(array, 0);
    }
    
    /**
     * Provides the recursive processing needed by recursiveArraySum().
     * @param array Array to be processed.
     * @param index Current index being processed.
     * @return Sum of elements in the array.
     */
    private static long recursiveArraySumHelper(int[] array, int index) {
        /* Corectly, recursively finds the suym of an array. */
        long sum = 0;
        if (index >= array.length) {
            return 0;
        } else {
            sum = sum + array[index] + recursiveArraySumHelper(array,index + 1);
            return sum;
        }

    }
    
    /**
     * Iteratively counts the number of even numbers in an array.
     * @param array Array to be processed.
     * @return Number of even numbers in the array.
     */
    public static int iterativeCountOnlyEvens(int[] array) {
        /* Correctly, iteratively counts the amount of even numbers in an array. */
        int evenNum = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i] % 2 == 0) {
                evenNum += 1;
            }
        }
        return evenNum;
    }
    
    /**
     * Recursively counts the number of even numbers in an array.
     * @param array Array to be processed.
     * @return Number of even numbers in the array.
     */
    public static int recursiveCountOnlyEvens(int[] array) {
        return recursiveCountOnlyEvensHelper(array, 0);
    }
    
    /**
     * Provides the recursive processing needed by recursiveCountOnlyEvens().
     * @param array Array to be processed.
     * @param index Current index being processed.
     * @return Sum of elements in the array.
     */
    private static int recursiveCountOnlyEvensHelper(int[] array, int index) {
        /* Correctly, recursively counts the amount of even numbers in an array. */
        if (index >= array.length) {
            return 0;  
        }
        
        int evenNum;
        if ((array[index] % 2) == 0) {    
            evenNum = 1;
        } else { 
            evenNum = 0;
        }
        return evenNum + recursiveCountOnlyEvensHelper(array, index + 1);
    }
}
